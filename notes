# Quick Start Guide - C++ Error Classifier

## 📁 Files You Need

1. **cpp_error_dataset.csv** - Your dataset with real C++ errors
2. **ML_Based_Error_Classification.py** - Training script
3. **main_code_for_errorclassification.py** - Code analyzer

---

## 🚀 Step-by-Step Usage

### **Step 1: Prepare Your Dataset**

Create `cpp_error_dataset.csv` with your comprehensive error dataset (the 200+ examples we created). Format:

```csv
error_message,error_type
"main.cpp:15:8: error: 'x' was not declared in this scope",lexical
"error C2143: syntax error : missing '}' before end of file",syntactic
"Line 45: function 'calculate' expects 2 arguments but 3 given",semantic
...
```

### **Step 2: Train the Model (One-Time Setup)**

Run the training script:

```bash
python ML_Based_Error_Classification.py
```

**What happens:**
- ✓ Loads data from `cpp_error_dataset.csv` (NOT fake data!)
- ✓ Trains 5 ML models (Random Forest, SVM, etc.)
- ✓ Selects best performing model
- ✓ Saves trained model as `cpp_error_classifier.pkl`

**Expected output:**
```
=== C++ ERROR CLASSIFIER - TRAINING ON CSV DATASET ===
✓ Dataset loaded successfully from 'cpp_error_dataset.csv'!
Shape: (200, 2)

Class distribution:
lexical      65
syntactic    75
semantic     60

Training models with 200 samples...
Training Random Forest...
  Test Accuracy: 0.8750
  CV Score: 0.8920 (+/- 0.0640)

Best model: Random Forest
✓ Model saved to 'cpp_error_classifier.pkl'
```

### **Step 3: Analyze C++ Code**

Run the analyzer:

```bash
python main_code_for_errorclassification.py
```

**What happens:**
- ✓ Loads trained model from `cpp_error_classifier.pkl`
- ✓ Compiles test C++ codes using g++
- ✓ Classifies each error as lexical/syntactic/semantic
- ✓ Shows confidence scores

**Example output:**
```
======================================================================
C++ CODE ANALYSIS RESULTS
======================================================================
✓ Compilation Success: No
📊 Total Errors/Warnings: 2

----------------------------------------------------------------------
ERROR CLASSIFICATIONS:
----------------------------------------------------------------------

1. main.cpp:5:15: error: expected ';' before 'cout'
   🏷️  Type: SYNTACTIC
   📈 Confidence: 94.23%
   📊 All probabilities:
      syntactic: 94.23%
      lexical: 3.45%
      semantic: 2.32%

2. main.cpp:6:12: error: 'undeclared_var' was not declared
   🏷️  Type: LEXICAL
   📈 Confidence: 87.65%

----------------------------------------------------------------------
SUMMARY:
----------------------------------------------------------------------
📋 Total errors: 2
🎯 Average confidence: 90.94%
🏆 Most common type: syntactic

Error type breakdown:
   syntactic: 1
   lexical: 1
```

---

## 💻 Using the Analyzer Programmatically

### **Method 1: Analyze Code String**

```python
from main_code_for_errorclassification import CppCodeErrorAnalyzer

# Initialize
analyzer = CppCodeErrorAnalyzer()

# Your C++ code
cpp_code = '''
#include <iostream>
int main() {
    int x = 5  // Missing semicolon
    cout << undeclared << endl;
    return 0;
}
'''

# Analyze
results = analyzer.analyze_code(cpp_code)
analyzer.print_analysis_results(results)
```

### **Method 2: Analyze C++ File**

```python
analyzer = CppCodeErrorAnalyzer()
results = analyzer.analyze_file('student_code.cpp')
analyzer.print_analysis_results(results)
```

### **Method 3: Access Results Programmatically**

```python
results = analyzer.analyze_code(cpp_code)

# Check compilation status
if results['compilation_success']:
    print("Code compiles successfully!")
else:
    # Access errors
    for classification in results['classifications']:
        error_msg = classification['error_message']
        error_type = classification['predicted_type']
        confidence = classification['confidence']
        
        print(f"{error_type}: {error_msg} ({confidence:.2%})")
    
    # Access summary
    summary = results['summary']
    print(f"Total errors: {summary['total']}")
    print(f"Error breakdown: {summary['by_type']}")
```

---

## 🎯 Real-World Applications

### **Educational Platform**

```python
def grade_student_submission(student_code):
    analyzer = CppCodeErrorAnalyzer()
    results = analyzer.analyze_code(student_code)
    
    if results['compilation_success']:
        return {"grade": 100, "feedback": "Perfect!"}
    
    # Provide targeted feedback
    feedback = []
    for cls in results['classifications']:
        error_type = cls['predicted_type']
        
        if error_type == 'lexical':
            feedback.append("Check variable declarations and #include statements")
        elif error_type == 'syntactic':
            feedback.append("Look for missing semicolons or brackets")
        elif error_type == 'semantic':
            feedback.append("Check data types and function signatures")
    
    grade = max(0, 100 - (results['total_errors'] * 10))
    return {"grade": grade, "feedback": feedback}
```

### **IDE Plugin**

```python
def provide_smart_help(error_message):
    analyzer = CppCodeErrorAnalyzer()
    error_type, confidence = analyzer.classifier.predict_error_type(error_message)
    
    help_text = {
        'lexical': "💡 Tip: Check if all variables are declared before use",
        'syntactic': "💡 Tip: Look for missing punctuation (;, }, ), ])",
        'semantic': "💡 Tip: Verify that data types match in assignments"
    }
    
    return f"{help_text.get(error_type, '')} (Confidence: {confidence:.0%})"
```

### **Batch Analysis**

```python
def analyze_multiple_files(file_list):
    analyzer = CppCodeErrorAnalyzer()
    report = []
    
    for file_path in file_list:
        results = analyzer.analyze_file(file_path)
        report.append({
            'file': file_path,
            'errors': results['total_errors'],
            'types': results['summary']['by_type']
        })
    
    return pd.DataFrame(report)
```

---

## 🔧 Troubleshooting

### **Problem: Model file not found**
```
✗ Model file 'cpp_error_classifier.pkl' not found!
```
**Solution:** Run `ML_Based_Error_Classification.py` first to train the model.

### **Problem: Dataset file not found**
```
✗ CSV file 'cpp_error_dataset.csv' not found!
```
**Solution:** Create the dataset CSV file with your error examples.

### **Problem: Compiler not found**
```
Compiler 'g++' not found. Please install g++.
```
**Solution:** 
- Windows: Install MinGW or MSYS2
- Linux: `sudo apt-get install g++`
- Mac: `xcode-select --install`

### **Problem: Low accuracy on real errors**
**Solution:** 
- Add more examples to your dataset
- Include more realistic error message variations
- Retrain the model with the expanded dataset

---

## 📊 Understanding the Results

### **Error Types Explained**

- **LEXICAL**: Identifiers, variables, includes not found/declared
  - Example: `'x' was not declared in this scope`
  
- **SYNTACTIC**: Missing punctuation, malformed statements
  - Example: `expected ';' before 'return'`
  
- **SEMANTIC**: Type mismatches, logic errors, runtime issues
  - Example: `cannot convert 'string' to 'int'`

### **Confidence Scores**

- **90-100%**: Very confident, highly reliable
- **70-89%**: Confident, mostly reliable
- **50-69%**: Uncertain, might need human verification
- **<50%**: Low confidence, ambiguous error

---

## 🎓 Tips for Better Results

1. **Expand Your Dataset**: Add more real compiler error messages
2. **Include Variations**: Same error from different compilers
3. **Balance Classes**: Equal examples of lexical/syntactic/semantic
4. **Test Regularly**: Validate on new error messages
5. **Retrain Periodically**: As you collect more data

---

## ✅ Summary

| Step | Command | Output |
|------|---------|--------|
| 1. Train Model | `python ML_Based_Error_Classification.py` | `cpp_error_classifier.pkl` |
| 2. Analyze Code | `python main_code_for_errorclassification.py` | Classification results |

**Your ML model now automatically classifies C++ compiler errors!** 🎉